from abc import ABC, abstractmethod
from datetime import datetime

# ----------- CLASSES DE DOMÍNIO -----------

class Historico:
    def __init__(self):
        self.transacoes = []

    def adicionar_transacao(self, transacao):
        self.transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            }
        )

    def extrato(self):
        if not self.transacoes:
            print("Não foram realizadas movimentações.")
        else:
            for t in self.transacoes:
                print(f"{t['data']} - {t['tipo']}: R$ {t['valor']:.2f}")

# ----------- INTERFACE TRANSACAO -----------

class Transacao(ABC):
    @property
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def registrar(self, conta):
        pass

# ----------- OPERAÇÕES DEPÓSITO E SAQUE -----------

class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        if conta.depositar(self.valor):
            conta.historico.adicionar_transacao(self)

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        if conta.sacar(self.valor):
            conta.historico.adicionar_transacao(self)

# ----------- CLIENTE E PESSOA FÍSICA -----------

class Cliente(ABC):
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def adicionar_conta(self, conta):
        self.contas.append(conta)

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

class PessoaFisica(Cliente):
    def __init__(self, nome, cpf, data_nascimento, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.cpf = cpf
        self.data_nascimento = data_nascimento

# ----------- CONTA E CONTA CORRENTE -----------

class Conta:
    def __init__(self, numero, cliente, agencia="0001"):
        self.agencia = agencia
        self.numero = numero
        self.cliente = cliente
        self._saldo = 0.0
        self.historico = Historico()

    @property
    def saldo(self):
        return self._saldo

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    def sacar(self, valor):
        if valor <= 0:
            print("Erro! O valor informado não é válido.")
            return False
        if valor > self.saldo:
            print("Erro! Você não tem saldo suficiente.")
            return False
        self._saldo -= valor
        print(f"Saque de R$ {valor:.2f} realizado com sucesso!")
        return True

    def depositar(self, valor):
        if valor <= 0:
            print("Erro! O valor informado não é válido.")
            return False
        self._saldo += valor
        print(f"Depósito de R$ {valor:.2f} realizado com sucesso!")
        return True

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500.0, limite_saques=3, agencia="0001"):
        super().__init__(numero, cliente, agencia)
        self.limite = limite
        self.limite_saques = limite_saques
        self._saques_realizados = 0

    def sacar(self, valor):
        if self._saques_realizados >= self.limite_saques:
            print("Erro! Número máximo de saques excedido.")
            return False
        if valor > self.limite:
            print("Erro! O valor do saque excede o limite.")
            return False
        sucesso = super().sacar(valor)
        if sucesso:
            self._saques_realizados += 1
        return sucesso

# ----------- FUNÇÕES DO MENU -----------

def menu_principal():
    menu = """
[d] Depositar
[s] Sacar
[e] Extrato
[c] Cadastrar usuário
[n] Nova conta
[l] Listar contas
[q] Sair

=> """
    return input(menu)

def criar_usuario(usuarios):
    cpf = input("Informe o CPF (somente números): ").strip()
    cpf = "".join(filter(str.isdigit, cpf))
    if any(u.cpf == cpf for u in usuarios):
        print("Já existe usuário com esse CPF!")
        return

    nome = input("Informe o nome completo: ").strip()
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ").strip()
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ").strip()
    usuario = PessoaFisica(nome, cpf, data_nascimento, endereco)
    usuarios.append(usuario)
    print("Usuário criado com sucesso!")

def filtrar_usuario(cpf, usuarios):
    for usuario in usuarios:
        if usuario.cpf == cpf:
            return usuario
    return None

def criar_conta_corrente(numero_conta, usuarios, contas):
    cpf = input("Informe o CPF do usuário: ").strip()
    cpf = "".join(filter(str.isdigit, cpf))
    usuario = filtrar_usuario(cpf, usuarios)
    if usuario:
        conta = ContaCorrente(numero_conta, usuario)
        usuario.adicionar_conta(conta)
        contas.append(conta)
        print(f"Conta criada com sucesso! Agência: {conta.agencia} Conta: {conta.numero}")
    else:
        print("Usuário não encontrado. Conta não criada.")

def listar_contas(contas):
    for conta in contas:
        print("="*30)
        print(f"Agência:\t{conta.agencia}")
        print(f"C/C:\t\t{conta.numero}")
        print(f"Titular:\t{conta.cliente.nome}")

def main():
    usuarios = []
    contas = []

    while True:
        opcao = menu_principal()

        if opcao == "d":
            cpf = input("Informe o CPF do titular: ").strip()
            cpf = "".join(filter(str.isdigit, cpf))
            usuario = filtrar_usuario(cpf, usuarios)
            if not usuario or not usuario.contas:
                print("Usuário não encontrado ou não possui conta.")
                continue
            numero = int(input("Informe o número da conta: "))
            conta = next((c for c in usuario.contas if c.numero == numero), None)
            if not conta:
                print("Conta não encontrada para este usuário.")
                continue
            valor = float(input("Informe o valor do depósito: "))
            transacao = Deposito(valor)
            usuario.realizar_transacao(conta, transacao)

        elif opcao == "s":
            cpf = input("Informe o CPF do titular: ").strip()
            cpf = "".join(filter(str.isdigit, cpf))
            usuario = filtrar_usuario(cpf, usuarios)
            if not usuario or not usuario.contas:
                print("Usuário não encontrado ou não possui conta.")
                continue
            numero = int(input("Informe o número da conta: "))
            conta = next((c for c in usuario.contas if c.numero == numero), None)
            if not conta:
                print("Conta não encontrada para este usuário.")
                continue
            valor = float(input("Informe o valor do saque: "))
            transacao = Saque(valor)
            usuario.realizar_transacao(conta, transacao)

        elif opcao == "e":
            cpf = input("Informe o CPF do titular: ").strip()
            cpf = "".join(filter(str.isdigit, cpf))
            usuario = filtrar_usuario(cpf, usuarios)
            if not usuario or not usuario.contas:
                print("Usuário não encontrado ou não possui conta.")
                continue
            numero = int(input("Informe o número da conta: "))
            conta = next((c for c in usuario.contas if c.numero == numero), None)
            if not conta:
                print("Conta não encontrada para este usuário.")
                continue
            print("\n================ EXTRATO ================")
            conta.historico.extrato()
            print(f"\nSaldo: R$ {conta.saldo:.2f}")
            print("==========================================")

        elif opcao == "c":
            criar_usuario(usuarios)

        elif opcao == "n":
            numero_conta = len(contas) + 1
            criar_conta_corrente(numero_conta, usuarios, contas)

        elif opcao == "l":
            listar_contas(contas)

        elif opcao == "q":
            print("Saindo do sistema. Até logo!")
            break

        else:
            print("Operação não identificada, por favor selecione novamente a operação desejada.")

if __name__ == "__main__":
    main()
